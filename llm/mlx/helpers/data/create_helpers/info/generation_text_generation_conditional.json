{
  "structure": "Text Generation (Conditional)",
  "system": "You are an expert Python developer tasked with generating complete, functional, and well-documented Python code. Based on the provided example, create a Python script that implements the specified structure. The code should:\n- Be syntactically correct and follow PEP 8 style guidelines.\n- Include necessary imports and type hints where applicable.\n- Handle errors gracefully with try-except blocks.\n- Include docstrings and comments for clarity.\n- Be compatible with the existing MLX framework (e.g., use jet.llm.mlx modules).\n- Produce output matching the example structure exactly.\n\nGenerate a complete Python script that implements the provided info. Do not include markdown code fences or any non-Python content. Ensure the script can be saved and run directly.",
  "query": "Generate a Python script for the Text Generation (Conditional) structure.",
  "code": "from typing import List, Dict, Optional\nfrom jet.llm.mlx.config import DEFAULT_MODEL\nfrom jet.llm.mlx.mlx_types import ModelType\nfrom jet.llm.mlx.models import resolve_model\nfrom jet.llm.mlx.token_utils import tokenize_strings\nfrom jet.logger import logger\nimport mlx.core as mx\nfrom mlx_lm import load\nfrom mlx_lm.generate import stream_generate, generate_step\nfrom mlx_lm.sample_utils import make_sampler, make_logits_processors\nfrom mlx_lm.utils import TokenizerWrapper\n\n# Custom exceptions for specific error cases\n\n\nclass ModelLoadError(Exception):\n    pass\n\n\nclass InvalidMethodError(Exception):\n    pass\n\n\nclass InvalidOutputError(Exception):\n    pass\n\n# Type definitions for structured data\n\n\nclass ChatMessage(TypedDict):\n    role: str\n    content: str\n\n\nclass AnswerResult(TypedDict):\n    answer: str\n    token_id: int\n    is_valid: bool\n    method: str\n    error: Optional[str]\n\n\ndef answer_yes_no(\n    question: str,\n    model_path: ModelType = DEFAULT_MODEL,\n    method: str = \"stream_generate\",\n    max_tokens: int = 1,\n    temperature: float = 0.1,\n    top_p: float = 0.1\n) -> AnswerResult:\n    model_path = resolve_model(model_path)\n\n    try:\n        try:\n            model, tokenizer = load(resolve_model(model_path))\n        except Exception as e:\n            raise ModelLoadError(f\"Error loading model or tokenizer: {e}\")\n\n        try:\n            model, tokenizer = load(resolve_model(model_path))\n        except Exception as e:\n            raise ModelLoadError(f\"Error loading model or tokenizer: {e}\")\n\n        if method not in [\"stream_generate\", \"generate_step\"]:\n            raise InvalidMethodError(\n                f\"Invalid method specified: {method}. Valid methods: {['stream_generate', 'generate_step']}\"\n            )\n\n        messages: List[ChatMessage] = [\n            {\"role\": \"system\", \"content\": \"Answer the following question with only 'Yes' or 'No'. Ensure accuracy.\"},\n            {\"role\": \"user\", \"content\": question}\n        ]\n\n        try:\n            formatted_prompt: str = tokenizer.apply_chat_template(\n                messages, tokenize=False, add_generation_prompt=True\n            )\n        except Exception as e:\n            raise PromptFormatting",
  "error": null
}