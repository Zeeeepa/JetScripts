{
  "structure": "Yes/No",
  "system": "You are an expert Python developer tasked with generating complete, functional, and well-documented Python code. Based on the provided example, create a Python script that implements the specified structure. The code should:\n- Be syntactically correct and follow PEP 8 style guidelines.\n- Include necessary imports and type hints where applicable.\n- Handle errors gracefully with try-except blocks.\n- Include docstrings and comments for clarity.\n- Be compatible with the existing MLX framework (e.g., use jet.llm.mlx modules).\n- Produce output matching the example structure exactly.\n\nGenerate a complete Python script that implements the provided info. Do not include markdown code fences or any non-Python content. Ensure the script can be saved and run directly.",
  "query": "Generate a Python script for the Yes/No structure.",
  "code": "from typing import List, Dict, Optional, TypedDict\nfrom uuid import uuid4\nfrom jet.llm.mlx.config import DEFAULT_MODEL\nfrom jet.llm.mlx.mlx_types import ModelType\nfrom jet.llm.mlx.models import resolve_model\nfrom jet.llm.mlx.token_utils import tokenize_strings\nfrom jet.logger import logger\nimport mlx.core as mx\nfrom mlx_lm import load\nfrom mlx_lm.generate import stream_generate, generate_step\nfrom mlx_lm.sample_utils import make_sampler, make_logits_processors\nfrom mlx_lm.utils import TokenizerWrapper\n\n# Custom exceptions for specific error cases\nclass ModelLoadError(Exception):\n    pass\n\n\nclass InvalidMethodError(Exception):\n    pass\n\n\nclass InvalidOutputError(Exception):\n    pass\n\n\n# Type definitions for structured data\nclass ChatMessage(TypedDict):\n    role: str\n    content: str\n\n\nclass AnswerResult(TypedDict):\n    answer: str\n    token_id: int\n    is_valid: bool\n    method: str\n    error: Optional[str]\n\n\ndef yes_no_question(question: str) -> AnswerResult:\n    \"\"\"\n    Generates a yes/no question using a language model.\n\n    Args:\n        question: The question to be answered.\n\n    Returns:\n        AnswerResult containing the answer, token ID, validity, method, and any error.\n    \"\"\"\n    # Create a yes/no system prompt\n    system_prompt = create_system_prompt([\"Yes\", \"No\"])\n\n    # Log the system prompt\n    log_prompt_details(system_prompt, question, \"DEFAULT_MODEL\")\n\n    # Format the message\n    messages = format_chat_messages(system_prompt, question)\n\n    # Generate the answer\n    answer = generate_answer_stream(\n        resolve_model(\"DEFAULT_MODEL\"), messages, 10, 0.0, 0.9\n    )\n\n    # Validate the answer\n    validate_answer(answer, [\"Yes\", \"No\"])\n\n    return AnswerResult(answer=answer, token_id=-1, is_valid=True, method=\"stream_generate\", error=None)\n\n\ndef yes_no_prompt(prompt: str) -> str:\n    \"\"\"\n    Generates a yes/no prompt using a language model.\n\n    Args:\n        prompt: The prompt to be generated.\n\n    Returns:\n        str: The generated prompt.\n    \"\"\"\n    # Create a yes/no system prompt\n    system_prompt = create_system_prompt([\"Yes\", \"No\"])\n\n    # Log the system prompt\n    log_prompt_details(system_prompt, prompt, \"DEFAULT_MODEL\")\n\n    # Format the message\n    messages = format_chat_messages(system_prompt, prompt)\n\n    # Generate the answer\n    answer = generate_answer_stream(\n        resolve_model(\"DEFAULT_MODEL\"), messages, 10, 0.0, 0.9\n    )\n\n    # Validate the answer\n    validate_answer(answer, [\"Yes\", \"No\"])\n\n    return AnswerResult(answer=answer, token_id=-1, is_valid=True, method=\"stream_generate\", error=None)\n\n\ndef yes_no_game(prompt: str, max_tokens: int = 10) -> AnswerResult:\n    \"\"\"\n    Generates a yes/no game using a language model.\n\n    Args:\n        prompt: The prompt to be generated.\n        max_tokens: The maximum number of tokens to generate.\n\n    Returns:\n        AnswerResult containing the answer, token ID, validity, method, and any error.\n    \"\"\"\n    # Create a yes/no system prompt\n    system_prompt = create_system_prompt([\"Yes\", \"No\"])\n\n    # Log the system prompt\n    log_prompt_details(system_prompt, prompt, \"DEFAULT_MODEL\")\n\n    # Format the message\n    messages = format_chat_messages(system_prompt, prompt)\n\n    # Generate the answer\n    answer = generate_answer_stream(\n        resolve_model(\"DEFAULT_MODEL\"), messages, max_tokens, 0.0, 0.9\n    )\n\n    # Validate the answer\n    validate_answer(answer, [\"Yes\", \"No\"])\n\n    return AnswerResult(answer=answer, token_id=-1, is_valid=True, method=\"stream_generate\", error=None)\n\n\ndef yes_no_game_loop(prompt: str, max_tokens: int = 10) -> AnswerResult:\n    \"\"\"\n    Generates a yes/no game loop using a language model.\n\n    Args:\n        prompt: The prompt to be generated.\n        max_tokens: The maximum number of tokens to generate.\n\n    Returns:\n        AnswerResult containing the answer, token ID, validity, method, and any error.\n    \"\"\"\n    # Generate the yes/no question\n    answer = yes_no_question(prompt)\n\n    # Validate the answer\n    validate_answer(answer, [\"Yes\", \"No\"])\n\n    # Generate the yes/no game loop\n    answer = generate_answer_stream(\n        resolve_model(\"DEFAULT_MODEL\"), [answer], max_tokens, 0.0, 0.9\n    )\n\n    # Validate the answer\n    validate_answer(answer, [\"Yes\", \"No\"])\n\n    return AnswerResult(answer=answer, token_id=-1, is_valid=True, method=\"stream_generate\", error=None)\n\n\ndef main():\n    # Generate a yes/no question\n    print(\"Yes/No Question:\")\n    print(yes_no_question(\"Is the sun shining today?\"))\n\n    # Generate a yes/no game loop\n    print(\"\\nYes/No Game Loop:\")\n    print(yes_no_game_loop(\"Is the moon full tonight?\"))\n\n    # Generate a yes/no game\n    print(\"\\nYes/No Game:\")\n    print(yes_no_game(\"Is the weather nice today?\"))\n\n    # Validate the answers\n    print(\"\\nValidating Answers:\")\n    print(validate_answer(yes_no_question(\"Is the sun shining today?\"), [\"Yes\", \"No\"]))\n    print(validate_answer(yes_no_game_loop(\"Is the moon full tonight?\"), [\"Yes\", \"No\"]))\n    print(validate_answer(yes_no_game(\"Is the weather nice today?\"), [\"Yes\", \"No\"]))\n\n\nif __name__ == \"__main__\":\n    main()",
  "error": null,
  "duration": "26.93 seconds"
}