{
  "structure": "Text Correction",
  "system": "You are an expert Python developer tasked with generating complete, functional, and well-documented Python code. Based on the provided example, create a Python script that implements the specified structure. The code should:\n- Be syntactically correct and follow PEP 8 style guidelines.\n- Include necessary imports and type hints where applicable.\n- Handle errors gracefully with try-except blocks.\n- Include docstrings and comments for clarity.\n- Be compatible with the existing MLX framework (e.g., use jet.llm.mlx modules).\n- Produce output matching the example structure exactly.\n\nGenerate a complete Python script that implements the provided info. Do not include markdown code fences or any non-Python content. Ensure the script can be saved and run directly.",
  "query": "Generate a Python script for the Text Correction structure.",
  "code": "from typing import List, Dict, Optional, TypedDict\nfrom uuid import uuid4\nfrom jet.llm.mlx.config import DEFAULT_MODEL\nfrom jet.llm.mlx.mlx_types import ModelType\nfrom jet.llm.mlx.models import resolve_model\nfrom jet.llm.mlx.token_utils import tokenize_strings\nfrom jet.logger import logger\nimport mlx.core as mx\nfrom mlx_lm import load\nfrom mlx_lm.generate import stream_generate, generate_step\nfrom mlx_lm.sample_utils import make_sampler, make_logits_processors\nfrom mlx_lm.utils import TokenizerWrapper\n\n# Custom exceptions for specific error cases\nclass ModelLoadError(Exception):\n    pass\n\n\nclass InvalidMethodError(Exception):\n    pass\n\n\nclass InvalidOutputError(Exception):\n    pass\n\n\n# Type definitions for structured data\nclass ChatMessage(TypedDict):\n    role: str\n    content: str\n\n\nclass AnswerResult(TypedDict):\n    answer: str\n    token_id: int\n    is_valid: bool\n    method: str\n    error: Optional[str]\n\n\ndef correct_text(text: str, model_path: ModelType = DEFAULT_MODEL, method: str = \"stream_generate\", max_tokens: int = 10, temperature: float = 0.0, top_p: float = 0.9) -> AnswerResult:\n    \"\"\"\n    Corrects the text using a language model.\n\n    Args:\n        text: The text to be corrected.\n        model_path: Path to the model (defaults to DEFAULT_MODEL).\n        method: Generation method (\"stream_generate\" or \"generate_step\").\n        max_tokens: Maximum number of tokens to generate.\n        temperature: Sampling temperature.\n        top_p: Top-p sampling parameter.\n\n    Returns:\n        AnswerResult containing the corrected answer, token ID, validity, method, and any error.\n    \"\"\"\n    try:\n        # Validate inputs\n        validate_method(method)\n\n        # Load model and tokenizer\n        model_components = load_model_components(model_path)\n\n        # Create and log prompt\n        system_prompt = create_system_prompt([\"Correct this sentence.\"]))\n        log_prompt_details(system_prompt, text, model_path)\n\n        # Format messages and apply chat template\n        messages = format_chat_messages(system_prompt, text)\n        formatted_prompt = model_components.tokenizer.apply_chat_template(\n            messages, tokenize=False, add_generation_prompt=True\n        )\n\n        # Encode choices and setup generation parameters\n        choice_token_map = encode_choices(model_components.tokenizer, [\"Correct this sentence.\"])\n        logits_processors, sampler, stop_tokens = setup_generation_parameters(\n            model_components.tokenizer, choice_token_map, temperature, top_p\n        )\n\n        # Generate answer based on method\n        if method == \"stream_generate\":\n            answer, token_id, _ = generate_answer_stream(\n                model_components, formatted_prompt, max_tokens, logits_processors, sampler, stop_tokens, [\"Correct this sentence.\"])\n        else:\n            answer, token_id, _ = generate_answer_step(\n                model_components, formatted_prompt, max_tokens, logits_processors, sampler, stop_tokens, [\"Correct this sentence.\"])\n        answer = model_components.tokenizer.decode(answer)\n        if answer in [\"Correct this sentence.\", \"Correct this sentence.\"]:\n            break\n\n        # Validate the answer\n        validate_answer(answer, [\"Correct this sentence.\", \"Correct this sentence.\"])\n\n        return AnswerResult(\n            answer=answer,\n            token_id=token_id,\n            is_valid=True,\n            method=method,\n            error=None\n        )\n\n    except Exception as e:\n        return AnswerResult(\n            answer=\"\",\n            token_id=-1,\n            is_valid=False,\n            method=method,\n            error=str(e)\n        )",
  "error": null
}