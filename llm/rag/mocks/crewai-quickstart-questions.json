[
  {
    "question": "What is CrewAI and what does it help you achieve?",
    "context": "CrewAI is a framework that helps build collaborative AI agents for research and reporting tasks, like uncovering the latest AI developments."
  },
  {
    "question": "What is the first step to create a CrewAI project?",
    "context": "Run the command `crewai create crew latest-ai-development` to create a project with the basic structure in a directory named `latest-ai-development`."
  },
  {
    "question": "How do you define agents in CrewAI?",
    "context": "Agents are defined in the `agents.yaml` file with attributes like role, goal, and backstory. Variables such as `{topic}` are dynamically replaced by values in the `main.py` file."
  },
  {
    "question": "What is the purpose of the `research_task` in tasks.yaml?",
    "context": "The `research_task` involves thorough research about a topic, finding relevant information for 2024, and summarizing it into 10 bullet points."
  },
  {
    "question": "How does the `reporting_task` enhance research output?",
    "context": "The `reporting_task` reviews research context and expands topics into detailed markdown reports for easy comprehension."
  },
  {
    "question": "What is the purpose of the `crew.py` file?",
    "context": "The `crew.py` file defines the agents, tasks, and crew, enabling execution through a sequential process. It also specifies configurations for output files and integrates tools like SerperDevTool."
  },
  {
    "question": "How can you customize CrewAI processes before and after kickoff?",
    "context": "Use `@before_kickoff` and `@after_kickoff` annotations to modify inputs and results during the crew kickoff process."
  },
  {
    "question": "How can a custom input, such as a topic, be passed to a crew?",
    "context": "Custom inputs like `topic` are passed via a dictionary in `main.py`, allowing tasks and agents to dynamically adjust their operations."
  },
  {
    "question": "What environment variables are required to run a CrewAI project?",
    "context": "Set API keys such as `OPENAI_API_KEY` and `SERPER_API_KEY` in a `.env` file for integration with external services."
  },
  {
    "question": "How do you install dependencies for a CrewAI project?",
    "context": "Navigate to the project directory, then use the command `crewai install` to lock and install dependencies."
  },
  {
    "question": "What command is used to run a CrewAI project?",
    "context": "Use the command `crewai run` in the root of the project directory to execute the crew."
  },
  {
    "question": "What does the final report generated by CrewAI contain?",
    "context": "The report, saved as `report.md`, contains sections like introduction, benefits, frameworks, applications in HR and finance, market trends, and future predictions about AI agents."
  },
  {
    "question": "Why is consistent naming important in CrewAI files?",
    "context": "Consistent names between YAML files and Python methods ensure proper linking of configurations and code, enabling smooth task execution."
  },
  {
    "question": "What are some common annotations used in CrewAI?",
    "context": "Annotations like `@agent`, `@task`, `@crew`, `@before_kickoff`, and `@after_kickoff` are used to define agents, tasks, crew, and process behavior."
  },
  {
    "question": "What is the purpose of the replay feature in CrewAI?",
    "context": "The replay feature allows rerunning specific tasks from the last crew kickoff using the command `crewai replay <task_id>`."
  },
  {
    "question": "How do you reset a CrewAI project's memory?",
    "context": "Use the command `crewai reset-memories --all` to clear the crew's memory for a fresh start."
  },
  {
    "question": "What is the easiest way to deploy a CrewAI project?",
    "context": "Deploy the project through CrewAI Enterprise for a production-ready environment with minimal effort."
  }
]
