from jaguardb_http_client.JaguarHttpClient import JaguarHttpClient
from jet.logger import CustomLogger
from jet.models.config import MODELS_CACHE_DIR
from llama_index.core import StorageContext
from llama_index.core import VectorStoreIndex, SimpleDirectoryReader
from llama_index.core.settings import Settings
from llama_index.embeddings.huggingface import HuggingFaceEmbedding
from llama_index.vector_stores.jaguar import JaguarVectorStore
import os
import shutil


OUTPUT_DIR = os.path.join(
    os.path.dirname(__file__), "generated", os.path.splitext(os.path.basename(__file__))[0])
shutil.rmtree(OUTPUT_DIR, ignore_errors=True)
log_file = os.path.join(OUTPUT_DIR, "main.log")
logger = CustomLogger(log_file, overwrite=True)
logger.info(f"Logs: {log_file}")

model_name = "sentence-transformers/all-MiniLM-L6-v2"
Settings.embed_model = HuggingFaceEmbedding(
    model_name=model_name,
    cache_folder=MODELS_CACHE_DIR,
)


"""
# Jaguar Vector Store

This document demonstrates llama_index working with Jaguar vector store.

- It is a distributed vector database that can store large number of vectors.
- The ZeroMove feature enables instant horizontal scaling.
- It supports embeddings, text, images, videos, PDFs, audio, time series, and spatial data. 
- The all-master architecture allows both parallel reads and writes.
- Its anomaly detection capabilities can distinguish outliers in the dataset.
- The RAG support can combine LLMs and proprietary and real-time data.
- Sharing of metadata across multiple vector indexes improves data consistency.
- Distance metrics include Euclidean, Cosine, InnerProduct, Manhatten, Chebyshev, Hamming, Jeccard, and Minkowski.
- Similarity search can be performed with time cutoff and time decay effects.

## Prerequisites

There are two requirements for running the examples in this file.

You must install and set up the JaguarDB server and its HTTP gateway server. 
Please follow the instructions in [Jaguar Setup](http://www.jaguardb.com/docsetup.html) as a reference.

You must install packages llama-index and jaguardb-http-client.

**Method One : Docker**

    docker pull jaguardb/jaguardb
    docker run -d -p 8888:8888 -p 8080:8080 --name jaguardb jaguardb/jaguardb
    pip install -U llama-index
    pip install -U jaguardb-http-client

**Method Two: Quick Setup(Linux)**

    curl -fsSL http://jaguardb.com/install.sh | sh\n
    pip install -U llama-index
    pip install -U jaguardb-http-client
"""
logger.info("# Jaguar Vector Store")

# %pip install llama-index-vector-stores-jaguar

# !pip install -U jaguardb-http-client

"""
## Imports
The following packages should be imported. We use the MLXEmbedding as an example. You could choose other embedding models in your application.
"""
logger.info("## Imports")


"""
## Client Object
We now instantiate a jaguar vector store client object. The url is the http endpoint of the gateway server. The url should be replaced with your environment settings. The pod is the Pod (or database) name. The store is the name of the vector store. A pod may have multiple stores. The vector_index is the name of the vector index in the store. A store may have multiple vector indexes. The store client object is, however, bound to one vector index only. The vector_type specifies the attributes of the vector index. In the string "cosine_fraction_short", cosine means that the distance between two vectors is computed with the cosine distance. Fraction means the vector components are fractional numbers. Short means the storage format of the vector components is a short integer of signed 16-bits integers. Storage format could be float of 32-bit floating point numbers. It can also be a byte of 8-bit signed integers. The vector_dimension is the dimension of the vector generated by the provided embedding model.
"""
logger.info("## Client Object")

url = "http://127.0.0.1:8080/fwww/"
pod = "vdb"
store = "llamaindex_jaguar_store"
vector_index = "v"
vector_type = "cosine_fraction_float"
vector_dimension = 1536  # per MLXEmbedding model
jaguarstore = JaguarVectorStore(
    pod,
    store,
    vector_index,
    vector_type,
    vector_dimension,
    url,
)

"""
## Authentication
The client must login or connect to back-end jaguar server for system security and user authentication. Environment variable JAGUAR_API_KEY or file $HOME/.jagrc file must  contain the jaguar api ke issued by your system administrator. The login() method returns True or False. If it returns False, then it may mean that your jaguar api key is invalid, or the http gateway server is not running, or the jaguar server is not running properly.
"""
logger.info("## Authentication")

true_or_false = jaguarstore.login()
logger.debug(f"login result is {true_or_false}")

"""
## Create Vector Store
We now create a vector store with a field 'v:text' of size 1024 bytes
to hold text, and two additional metadata fields 'author' and 'category'.
"""
logger.info("## Create Vector Store")

metadata_str = "author char(32), category char(16)"
text_size = 1024
jaguarstore.create(metadata_str, text_size)

"""
## Load Documents
The following code opens the example Paul Gram documents and read them into memory
"""
logger.info("## Load Documents")

documents = SimpleDirectoryReader("./Users/jethroestrada/Desktop/External_Projects/Jet_Projects/JetScripts/data/jet-resume/data/").load_data()
logger.debug(f"loading {len(documents)} doument(s)")

"""
## Make Index
Prepare storage context, service context, and make an index object. After the call of from_documents(), there will be 22 vectors saved in the vector store.
"""
logger.info("## Make Index")

storage_context = StorageContext.from_defaults(vector_store=jaguarstore)

jaguarstore.clear()

index = VectorStoreIndex.from_documents(
    documents, storage_context=storage_context
)


num = jaguarstore.count()
logger.debug(f"There are {num} vectors in jaguar vector store")

"""
## Ask Questions
We get a query engine and ask some questions to the engine.
"""
logger.info("## Ask Questions")

query_engine = index.as_query_engine()
q = "What did the author do growing up?"
logger.debug(f"Question: {q}")
response = query_engine.query(q)
logger.debug(f"Answer: {str(response)}\n")

q = "What did the author do after his time at Viaweb?"
logger.debug(f"Question: {q}")
response = query_engine.query(q)
logger.debug(f"Answer: {str(response)}")

"""
## Pass Query Options
We can pass extra arguments to the query engine to select only a subset of data from the jaguar vector store. This can be achieved by using the `vector_store_kwargs` argument. Parameter day_cutoff is number of days beyond which text will be ignored. day_decay_rate is rate of daily decay for similarity scores.
"""
logger.info("## Pass Query Options")

qkwargs = {
    "args": "day_cutoff=365,day_decay_rate=0.01",
    "where": "category='startup' or category=''",
}
query_engine_filter = index.as_query_engine(vector_store_kwargs=qkwargs)
q = "What was the author's life style?"
logger.debug(f"Question: {q}")
response = query_engine_filter.query(q)
logger.debug(f"Answer: {str(response)}")

"""
## Cleanup and Logout
All vectors and related data in the vector store can be deleted and the vector store can be removed completely to finish the test. Logout call makes sure resources used by the client are released.
"""
logger.info("## Cleanup and Logout")

jaguarstore.clear()

jaguarstore.drop()

jaguarstore.logout()

logger.info("\n\n[DONE]", bright=True)