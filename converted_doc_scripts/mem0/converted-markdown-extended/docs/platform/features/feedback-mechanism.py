import asyncio
from jet.transformers.formatters import format_json
from jet.logger import CustomLogger
from mem0 import MemoryClient
from mem0.exceptions import MemoryNotFoundError, APIError
import MemoryClient from 'mem0ai'
import os
import shutil


OUTPUT_DIR = os.path.join(
    os.path.dirname(__file__), "generated", os.path.splitext(os.path.basename(__file__))[0])
shutil.rmtree(OUTPUT_DIR, ignore_errors=True)
log_file = os.path.join(OUTPUT_DIR, "main.log")
logger = CustomLogger(log_file, overwrite=True)
logger.info(f"Logs: {log_file}")

"""
---
title: Feedback Mechanism
icon: "thumbs-up"
iconType: "solid"
---

Mem0's **Feedback Mechanism** allows you to provide feedback on the memories generated by your application. This feedback is used to improve the accuracy of the memories and the search results.

## How it works

The feedback mechanism is a simple API that allows you to provide feedback on the memories generated by your application. The feedback is stored in the database and is used to improve the accuracy of the memories and the search results. Over time, Mem0 continuously learns from this feedback, refining its memory generation and search capabilities for better performance.

## Give Feedback

You can give feedback on a memory by calling the `feedback` method on the Mem0 client.

<CodeGroup>
"""
logger.info("## How it works")


client = MemoryClient(api_key="your_api_key")

client.feedback(memory_id="your-memory-id", feedback="NEGATIVE", feedback_reason="I don't like this memory because it is not relevant.")

"""

"""


client = new MemoryClient({ apiKey: 'your-api-key'})

client.feedback({
    memory_id: "your-memory-id",
    feedback: "NEGATIVE",
    feedback_reason: "I don't like this memory because it is not relevant."
})

"""
</CodeGroup>

## Feedback Types

The `feedback` parameter can be one of the following values:

- `POSITIVE`: The memory is useful.
- `NEGATIVE`: The memory is not useful.
- `VERY_NEGATIVE`: The memory is not useful at all.

## Parameters

The `feedback` method accepts these parameters:

| Parameter | Type | Required | Description |
|-----------|------|----------|-------------|
| `memory_id` | string | Yes | The ID of the memory to give feedback on |
| `feedback` | string | No | Type of feedback: `POSITIVE`, `NEGATIVE`, or `VERY_NEGATIVE` |
| `feedback_reason` | string | No | Optional explanation for the feedback |

<Note>
Pass `None` or `null` to the `feedback` and `feedback_reason` parameters to remove existing feedback for a memory.
</Note>

## Bulk Feedback Operations

For applications with high volumes of feedback, you can provide feedback on multiple memories at once:

<CodeGroup>
"""
logger.info("## Feedback Types")


client = MemoryClient(api_key="your_api_key")

feedback_data = [
    {
        "memory_id": "memory-1",
        "feedback": "POSITIVE",
        "feedback_reason": "Accurately captured the user's preference"
    },
    {
        "memory_id": "memory-2",
        "feedback": "NEGATIVE",
        "feedback_reason": "Contains outdated information"
    }
]

for item in feedback_data:
    client.feedback(**item)

"""

"""


client = new MemoryClient({ apiKey: 'your-api-key'})

feedbackData = [
    {
        memory_id: "memory-1",
        feedback: "POSITIVE",
        feedback_reason: "Accurately captured the user's preference"
    },
    {
        memory_id: "memory-2",
        feedback: "NEGATIVE",
        feedback_reason: "Contains outdated information"
    }
]

for (item of feedbackData) {
    async def run_async_code_569bdb99():
        await client.feedback(item)
        return 
     = asyncio.run(run_async_code_569bdb99())
    logger.success(format_json())
}

"""
</CodeGroup>

## Best Practices

### When to Provide Feedback
- **Immediately after memory retrieval** when you can assess relevance
- **During user interactions** when users explicitly indicate satisfaction/dissatisfaction
- **Through automated evaluation** using your application's success metrics

### Effective Feedback Reasons
Provide specific, actionable feedback reasons:

✅ **Good examples:**
- "Contains outdated contact information"
- "Accurately captured the user's dietary restrictions"
- "Irrelevant to the current conversation context"

❌ **Avoid vague reasons:**
- "Bad memory"
- "Wrong"
- "Not good"

### Feedback Strategy
1. **Be consistent** - Apply the same criteria across similar memories
2. **Be specific** - Detailed reasons help improve the system faster
3. **Monitor patterns** - Regular feedback analysis helps identify improvement areas

## Error Handling

Handle potential errors when submitting feedback:

<CodeGroup>
"""
logger.info("## Best Practices")


client = MemoryClient(api_key="your_api_key")

try:
    client.feedback(
        memory_id="memory-123",
        feedback="POSITIVE",
        feedback_reason="Helpful context for user query"
    )
    logger.debug("Feedback submitted successfully")
except MemoryNotFoundError:
    logger.debug("Memory not found")
except APIError as e:
    logger.debug(f"API error: {e}")
except Exception as e:
    logger.debug(f"Unexpected error: {e}")

"""

"""


client = new MemoryClient({ apiKey: 'your-api-key'})

try {
    async def run_async_code_18ef75f9():
        await client.feedback({
        return 
     = asyncio.run(run_async_code_18ef75f9())
    logger.success(format_json())
        memory_id: "memory-123",
        feedback: "POSITIVE",
        feedback_reason: "Helpful context for user query"
    })
    console.log("Feedback submitted successfully")
} catch (error) {
    if (error.status === 404) {
        console.log("Memory not found")
    } else {
        console.log(`Error: ${error.message}`)
    }
}

"""
</CodeGroup>

## Feedback Analytics

Track the impact of your feedback by monitoring memory performance over time. Consider implementing:

- **Feedback completion rates** - What percentage of memories receive feedback
- **Feedback distribution** - Balance of positive vs. negative feedback  
- **Memory quality trends** - How accuracy improves with feedback volume
- **User satisfaction metrics** - Correlation between feedback and user experience
"""
logger.info("## Feedback Analytics")

logger.info("\n\n[DONE]", bright=True)